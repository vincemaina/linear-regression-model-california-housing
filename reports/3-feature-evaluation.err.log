Traceback (most recent call last):
  File "/home/vchapandrews/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/vchapandrews/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/vchapandrews/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/vchapandrews/anaconda3/envs/machine-learning-practise/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/vchapandrews/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/vchapandrews/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/vchapandrews/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from sklearn.feature_selection import SelectKBest, f_regression

best_features = SelectKBest(score_func=f_regression, k='all') # Identify the best features
fit = best_features.fit(X, y) # Fit the model

# Display the scores of each feature
df_scores = pd.DataFrame(fit.scores_)
df_columns = pd.DataFrame(X.columns)
feature_scores = pd.concat([df_columns, df_scores], axis=1)
feature_scores.columns = ['Feature', 'Score']
feature_scores.head(10).nlargest(10, 'Score')
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[6], line 4[0m
[1;32m      1[0m [38;5;28;01mfrom[39;00m [38;5;21;01msklearn[39;00m[38;5;21;01m.[39;00m[38;5;21;01mfeature_selection[39;00m [38;5;28;01mimport[39;00m SelectKBest, f_regression
[1;32m      3[0m best_features [38;5;241m=[39m SelectKBest(score_func[38;5;241m=[39mf_regression, k[38;5;241m=[39m[38;5;124m'[39m[38;5;124mall[39m[38;5;124m'[39m) [38;5;66;03m# Identify the best features[39;00m
[0;32m----> 4[0m fit [38;5;241m=[39m [43mbest_features[49m[38;5;241;43m.[39;49m[43mfit[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m)[49m [38;5;66;03m# Fit the model[39;00m
[1;32m      6[0m [38;5;66;03m# Display the scores of each feature[39;00m
[1;32m      7[0m df_scores [38;5;241m=[39m pd[38;5;241m.[39mDataFrame(fit[38;5;241m.[39mscores_)

File [0;32m~/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/sklearn/base.py:1151[0m, in [0;36m_fit_context.<locals>.decorator.<locals>.wrapper[0;34m(estimator, *args, **kwargs)[0m
[1;32m   1144[0m     estimator[38;5;241m.[39m_validate_params()
[1;32m   1146[0m [38;5;28;01mwith[39;00m config_context(
[1;32m   1147[0m     skip_parameter_validation[38;5;241m=[39m(
[1;32m   1148[0m         prefer_skip_nested_validation [38;5;129;01mor[39;00m global_skip_validation
[1;32m   1149[0m     )
[1;32m   1150[0m ):
[0;32m-> 1151[0m     [38;5;28;01mreturn[39;00m [43mfit_method[49m[43m([49m[43mestimator[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m~/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/sklearn/feature_selection/_univariate_selection.py:498[0m, in [0;36m_BaseFilter.fit[0;34m(self, X, y)[0m
[1;32m    480[0m [38;5;129m@_fit_context[39m(prefer_skip_nested_validation[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m    481[0m [38;5;28;01mdef[39;00m [38;5;21mfit[39m([38;5;28mself[39m, X, y):
[1;32m    482[0m [38;5;250m    [39m[38;5;124;03m"""Run score function on (X, y) and get the appropriate features.[39;00m
[1;32m    483[0m 
[1;32m    484[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    496[0m [38;5;124;03m        Returns the instance itself.[39;00m
[1;32m    497[0m [38;5;124;03m    """[39;00m
[0;32m--> 498[0m     X, y [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_data[49m[43m([49m
[1;32m    499[0m [43m        [49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mcsc[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m[43m [49m[43mmulti_output[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m
[1;32m    500[0m [43m    [49m[43m)[49m
[1;32m    502[0m     [38;5;28mself[39m[38;5;241m.[39m_check_params(X, y)
[1;32m    503[0m     score_func_ret [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mscore_func(X, y)

File [0;32m~/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/sklearn/base.py:621[0m, in [0;36mBaseEstimator._validate_data[0;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)[0m
[1;32m    619[0m         y [38;5;241m=[39m check_array(y, input_name[38;5;241m=[39m[38;5;124m"[39m[38;5;124my[39m[38;5;124m"[39m, [38;5;241m*[39m[38;5;241m*[39mcheck_y_params)
[1;32m    620[0m     [38;5;28;01melse[39;00m:
[0;32m--> 621[0m         X, y [38;5;241m=[39m [43mcheck_X_y[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43my[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mcheck_params[49m[43m)[49m
[1;32m    622[0m     out [38;5;241m=[39m X, y
[1;32m    624[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m no_val_X [38;5;129;01mand[39;00m check_params[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mensure_2d[39m[38;5;124m"[39m, [38;5;28;01mTrue[39;00m):

File [0;32m~/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/sklearn/utils/validation.py:1147[0m, in [0;36mcheck_X_y[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)[0m
[1;32m   1142[0m         estimator_name [38;5;241m=[39m _check_estimator_name(estimator)
[1;32m   1143[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1144[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00mestimator_name[38;5;132;01m}[39;00m[38;5;124m requires y to be passed, but the target y is None[39m[38;5;124m"[39m
[1;32m   1145[0m     )
[0;32m-> 1147[0m X [38;5;241m=[39m [43mcheck_array[49m[43m([49m
[1;32m   1148[0m [43m    [49m[43mX[49m[43m,[49m
[1;32m   1149[0m [43m    [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[43maccept_sparse[49m[43m,[49m
[1;32m   1150[0m [43m    [49m[43maccept_large_sparse[49m[38;5;241;43m=[39;49m[43maccept_large_sparse[49m[43m,[49m
[1;32m   1151[0m [43m    [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m
[1;32m   1152[0m [43m    [49m[43morder[49m[38;5;241;43m=[39;49m[43morder[49m[43m,[49m
[1;32m   1153[0m [43m    [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[1;32m   1154[0m [43m    [49m[43mforce_all_finite[49m[38;5;241;43m=[39;49m[43mforce_all_finite[49m[43m,[49m
[1;32m   1155[0m [43m    [49m[43mensure_2d[49m[38;5;241;43m=[39;49m[43mensure_2d[49m[43m,[49m
[1;32m   1156[0m [43m    [49m[43mallow_nd[49m[38;5;241;43m=[39;49m[43mallow_nd[49m[43m,[49m
[1;32m   1157[0m [43m    [49m[43mensure_min_samples[49m[38;5;241;43m=[39;49m[43mensure_min_samples[49m[43m,[49m
[1;32m   1158[0m [43m    [49m[43mensure_min_features[49m[38;5;241;43m=[39;49m[43mensure_min_features[49m[43m,[49m
[1;32m   1159[0m [43m    [49m[43mestimator[49m[38;5;241;43m=[39;49m[43mestimator[49m[43m,[49m
[1;32m   1160[0m [43m    [49m[43minput_name[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mX[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m   1161[0m [43m[49m[43m)[49m
[1;32m   1163[0m y [38;5;241m=[39m _check_y(y, multi_output[38;5;241m=[39mmulti_output, y_numeric[38;5;241m=[39my_numeric, estimator[38;5;241m=[39mestimator)
[1;32m   1165[0m check_consistent_length(X, y)

File [0;32m~/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/sklearn/utils/validation.py:959[0m, in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)[0m
[1;32m    953[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    954[0m             [38;5;124m"[39m[38;5;124mFound array with dim [39m[38;5;132;01m%d[39;00m[38;5;124m. [39m[38;5;132;01m%s[39;00m[38;5;124m expected <= 2.[39m[38;5;124m"[39m
[1;32m    955[0m             [38;5;241m%[39m (array[38;5;241m.[39mndim, estimator_name)
[1;32m    956[0m         )
[1;32m    958[0m     [38;5;28;01mif[39;00m force_all_finite:
[0;32m--> 959[0m         [43m_assert_all_finite[49m[43m([49m
[1;32m    960[0m [43m            [49m[43marray[49m[43m,[49m
[1;32m    961[0m [43m            [49m[43minput_name[49m[38;5;241;43m=[39;49m[43minput_name[49m[43m,[49m
[1;32m    962[0m [43m            [49m[43mestimator_name[49m[38;5;241;43m=[39;49m[43mestimator_name[49m[43m,[49m
[1;32m    963[0m [43m            [49m[43mallow_nan[49m[38;5;241;43m=[39;49m[43mforce_all_finite[49m[43m [49m[38;5;241;43m==[39;49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mallow-nan[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    964[0m [43m        [49m[43m)[49m
[1;32m    966[0m [38;5;28;01mif[39;00m ensure_min_samples [38;5;241m>[39m [38;5;241m0[39m:
[1;32m    967[0m     n_samples [38;5;241m=[39m _num_samples(array)

File [0;32m~/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/sklearn/utils/validation.py:124[0m, in [0;36m_assert_all_finite[0;34m(X, allow_nan, msg_dtype, estimator_name, input_name)[0m
[1;32m    121[0m [38;5;28;01mif[39;00m first_pass_isfinite:
[1;32m    122[0m     [38;5;28;01mreturn[39;00m
[0;32m--> 124[0m [43m_assert_all_finite_element_wise[49m[43m([49m
[1;32m    125[0m [43m    [49m[43mX[49m[43m,[49m
[1;32m    126[0m [43m    [49m[43mxp[49m[38;5;241;43m=[39;49m[43mxp[49m[43m,[49m
[1;32m    127[0m [43m    [49m[43mallow_nan[49m[38;5;241;43m=[39;49m[43mallow_nan[49m[43m,[49m
[1;32m    128[0m [43m    [49m[43mmsg_dtype[49m[38;5;241;43m=[39;49m[43mmsg_dtype[49m[43m,[49m
[1;32m    129[0m [43m    [49m[43mestimator_name[49m[38;5;241;43m=[39;49m[43mestimator_name[49m[43m,[49m
[1;32m    130[0m [43m    [49m[43minput_name[49m[38;5;241;43m=[39;49m[43minput_name[49m[43m,[49m
[1;32m    131[0m [43m[49m[43m)[49m

File [0;32m~/anaconda3/envs/machine-learning-practise/lib/python3.12/site-packages/sklearn/utils/validation.py:173[0m, in [0;36m_assert_all_finite_element_wise[0;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)[0m
[1;32m    156[0m [38;5;28;01mif[39;00m estimator_name [38;5;129;01mand[39;00m input_name [38;5;241m==[39m [38;5;124m"[39m[38;5;124mX[39m[38;5;124m"[39m [38;5;129;01mand[39;00m has_nan_error:
[1;32m    157[0m     [38;5;66;03m# Improve the error message on how to handle missing values in[39;00m
[1;32m    158[0m     [38;5;66;03m# scikit-learn.[39;00m
[1;32m    159[0m     msg_err [38;5;241m+[39m[38;5;241m=[39m (
[1;32m    160[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;132;01m{[39;00mestimator_name[38;5;132;01m}[39;00m[38;5;124m does not accept missing values[39m[38;5;124m"[39m
[1;32m    161[0m         [38;5;124m"[39m[38;5;124m encoded as NaN natively. For supervised learning, you might want[39m[38;5;124m"[39m
[0;32m   (...)[0m
[1;32m    171[0m         [38;5;124m"[39m[38;5;124m#estimators-that-handle-nan-values[39m[38;5;124m"[39m
[1;32m    172[0m     )
[0;32m--> 173[0m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg_err)

[0;31mValueError[0m: Input X contains NaN.
SelectKBest does not accept missing values encoded as NaN natively. For supervised learning, you might want to consider sklearn.ensemble.HistGradientBoostingClassifier and Regressor which accept missing values encoded as NaNs natively. Alternatively, it is possible to preprocess the data, for instance by using an imputer transformer in a pipeline or drop samples with missing values. See https://scikit-learn.org/stable/modules/impute.html You can find a list of all estimators that handle NaN values at the following page: https://scikit-learn.org/stable/modules/impute.html#estimators-that-handle-nan-values

